# Azure pipeline definition for the integration of the solution (continuous integration)
# Reference: https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

pr:
  autoCancel: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

schedules:
- cron: '0 0 * * *'
  displayName: 'Daily midnight build'
  branches:
    include:
    - master
  always: true

variables:
# library variable groups
- group: 'build-tools'
# common task variables
- name: 'BuildConfiguration'
  value: 'Debug'
- name: 'SolutionFile'
  value: 'Devpro.SpecFlowSamples.sln'
- name: 'TestProjects'
  value: 'test/*/*.csproj'
# tool variables (Sonar)
- name: 'sonar.project.name'
  value: 'SpecFlow Samples'
- name: 'sonar.project.key'
  value: 'devpro.specflow-samples'

stages:
- stage: 'quick_ci'
  displayName: 'Quick Continuous Integration'
  jobs:
  - job: 'linux_quick_ci'
    displayName: 'Quick CI on Linux'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Get latest .NET SDK'
      inputs:
        packageType: 'sdk'
        version: $(dotnet.sdk.version.lts)
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET solution'
      inputs:
        command: 'build'
        projects: '$(SolutionFile)'
        arguments: '-c $(BuildConfiguration)'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Run all .NET tests'
      inputs:
        command: 'test'
        projects: '$(TestProjects)'
        arguments: '--configuration $(BuildConfiguration) --filter "Category=mytag"'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
- stage: 'complete_ci'
  displayName: 'Complete Continuous Integration'
  dependsOn: [] # no dependencies: run at the same time as the unit testing stage
  jobs:
  - job: 'windows_complete_ci'
    displayName: 'Complete CI on Windows'
    pool:
      # code coverage generation only works on Windows for the moment
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Get latest .NET SDK'
      inputs:
        packageType: 'sdk'
        version: $(dotnet.sdk.version.lts)
    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET packages'
      inputs:
        command: 'restore'
        projects: '$(SolutionFile)'
        feedsToUse: 'select'
        noCache: $(dotnet.cache.disable)
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: SonarCloudPrepare@1
      displayName: 'Prepare code analysis'
      inputs:
        SonarCloud: '$(sonar.instance)'
        organization: '$(sonar.organization)'
        scannerMode: 'MSBuild'
        projectKey: '$(sonar.project.key)'
        projectName: '$(sonar.project.name)'
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET solution'
      inputs:
        command: 'build'
        projects: $(SolutionFile)
        arguments: '-c $(BuildConfiguration)'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Run all .NET tests'
      continueOnError: true
      inputs:
        command: 'test'
        projects: $(TestProjects)
        arguments: '-c $(BuildConfiguration) --filter "Category=mytag" --collect "Code coverage"'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: SonarCloudAnalyze@1
      displayName: 'Analyze the code with Sonar'
    - task: SonarCloudPublish@1
      displayName: 'Publish the code analysis results'
      inputs:
        pollingTimeoutSec: '300'
    - task: DotNetCoreCLI@2
      displayName: 'Publish test libraries'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(TestProjects)'
        arguments: '--configuration $(BuildConfiguration) -o $(Build.ArtifactStagingDirectory)/testlibraries'
        zipAfterPublish: true
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: PublishBuildArtifacts@1
      displayName: 'Save test projects artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/testlibraries'
        ArtifactName: 'testlibraries'
        publishLocation: 'Container'
